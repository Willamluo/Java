import java.util.*;
import java.text.*;

public class KQueue {
    
    // Avg time between arrivals = 1.0, avg time at server=1/0.75.
    double arrivalRate = 0.75;
    double serviceRate = 1.0;

    // A data structure to store customers.
    LinkedList<Customer> queue;

    // A data structure for simulation: list of forthcoming events.
    PriorityQueue<Event> eventList;

    // the number of servers
    int numServers = 2; 
    // the number of avaible servers
    int availableServers;

    // The system clock, which we'll advance from event to event.
    double clock;

    // Statistics.
    int numArrivals = 0;                    // How many arrived?
    int numDepartures;                      // How many left?
    double totalWaitTime, avgWaitTime;      // For time spent in queue.
    double totalSystemTime, avgSystemTime;  // For time spent in system.

    void init(int k, double arrivalRate)
    {
        this.numServers = k;
        this.arrivalRate = arrivalRate;
        init();
    }

    void plot()
    {
        Function F = new Function("System Time");
        double interval = 0.01;
        double unstable = 0;
        boolean find = false;
        for(double i = 0.1; i <= 5; i = i + interval){
            simulate(1000, 3, i);
            F.add(i, avgSystemTime);
            if(!find && avgSystemTime - F.get(i - interval) > 5){
                unstable = i;
                find = true;
            }
        }
        System.out.println("rate = " + 1.5 + " system time: " + F.get(1.5));
        System.out.println("Queue became unstable when rate is greater than " + unstable);
        F.show();
        
    }
    void init ()
    {
        queue = new LinkedList<Customer> ();
        eventList = new PriorityQueue<Event> ();
        clock = 0.0;
        numArrivals = numDepartures = 0;
        totalWaitTime = totalSystemTime = 0.0;
        availableServers = numServers;
        scheduleArrival ();
    }


    void simulate (int maxCustomers, int k, double arrivalRate)
    {
        init (k, arrivalRate);

        while (numArrivals < maxCustomers) {
            Event e = eventList.poll ();
            clock = e.eventTime;
            if (e.type == Event.ARRIVAL) {
                handleArrival (e);
            }
            else {
                handleDeparture (e);
            }
        }

        stats ();
    }


    void handleArrival (Event e)
    {
    	numArrivals ++;
    	queue.add (new Customer (clock));
       
    	if (availableServers > 0) {
    	    // This is the only customer => schedule a departure.
            availableServers --;
    	    scheduleDeparture ();
    	}
    	scheduleArrival ();
    }


    void handleDeparture (Event e)
    {
    	numDepartures ++;
    	Customer c = queue.removeFirst ();

        // This is the time from start to finish for this customer:
        double timeInSystem = clock - c.arrivalTime;

        // Maintain total (for average, to be computed later).
    	totalSystemTime += timeInSystem;
        availableServers = availableServers + 1 >= numServers ? numServers : availableServers + 1;
        //System.out.println("arrivalTime " + c.arrivalTime + " departure time " + clock);
    	if (queue.size() > numServers - availableServers) {
    	    // There's a waiting customer => schedule departure.
    	    Customer waitingCust = queue.get (numServers - availableServers);
                // This is the time spent only in waiting:
            double waitTime = clock - waitingCust.arrivalTime; 
            //System.out.print("arrivalTime " + waitingCust.arrivalTime + "  " + "waitTime " + waitTime);
    	    // Note where we are collecting stats for waiting time.
    	    totalWaitTime += waitTime;
            availableServers--;
    	    scheduleDeparture ();
	   }
    }


    void scheduleArrival ()
    {
    	// The next arrival occurs when we add an interrarrival to the the current time.
    	double nextArrivalTime = clock + randomInterarrivalTime();
    	eventList.add (new Event (nextArrivalTime, Event.ARRIVAL));
    }
    

    void scheduleDeparture ()
    {
    	double nextDepartureTime = clock + randomServiceTime ();
    	eventList.add (new Event (nextDepartureTime, Event.DEPARTURE));
    }


    double randomInterarrivalTime ()
    {
	   return exponential (arrivalRate);
    }


    double randomServiceTime ()
    {
	   return exponential (serviceRate);
    }


    double exponential (double gamma)
    {
        return (1.0 / gamma) * (-Math.log(1.0 - RandTool.uniform()));
    }

    void stats ()
    {
    	if (numDepartures == 0) {
    	    return;
    	}
    	avgWaitTime = totalWaitTime / numDepartures;
    	avgSystemTime = totalSystemTime / numDepartures;
    }


    public String toString ()
    {
        String results = "Simulation results:";
        results += "\n  numArrivals:     " + numArrivals;
        results += "\n  numDepartures:   " + numDepartures;
        results += "\n  avg Wait:        " + avgWaitTime;
        results += "\n  avg System Time: " + avgSystemTime;
        results += "\n  total System Time: " + totalSystemTime;
        results += "\n  total Wait Time: " + totalWaitTime;

        return results;
    }
    
    

    public static void main (String[] argv)
    {
        KQueue queue = new KQueue ();
        Scanner in = new Scanner(System.in);
        System.out.print("Input k value: ");
        int k = in.nextInt();
        while(k < 1){
            System.out.print("k must be greater than 0, please reinput ");
            k = in.nextInt();
        }
        
        // simulate with k servers and given arrivalRate
        queue.simulate (1000, k, 0.75);
        //queue.plot();
        System.out.println (queue);
    } 

}


// Class Customer (one instance per customer) stores whatever we 
// need for each customer. Since we collect statistics on waiting 
// time at the time of departure, we need to record when a 
// customer arrives.

class Customer {
    double arrivalTime;
   // int serverNum = -1;
    public Customer (double arrivalTime)
    {
        this.arrivalTime = arrivalTime;
       // this.serverNum = serverNum;
    }
}


// Class Event has everything we need for an event: the type of
// event, and when it occurs.

class Event implements Comparable {
    public static int ARRIVAL = 1;
    public static int DEPARTURE = 2;
    int type = -1;                     // Arrival or departure.
    double eventTime;                  // When it occurs.

    public Event (double eventTime, int type)
    {
	this.eventTime = eventTime;
	this.type = type;
    }


    public int compareTo (Object obj)
    {
        Event e = (Event) obj;
        if (eventTime < e.eventTime) {
            return -1;
        }
        else if (eventTime > e.eventTime) {
            return 1;
        }
        else {
            return 0;
        }
    }

    public boolean equals (Object obj)
    {
        return (compareTo(obj) == 0);
    }

}

